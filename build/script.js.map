{
  "version": 3,
  "sources": ["../src/shader.ts", "../src/textures.ts", "../src/script.ts"],
  "sourcesContent": ["const vertexShader = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec4 a_position;\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n    gl_Position = a_position;\r\n    uv = 0.5*a_position.xy+0.5;\r\n}\r\n`;\r\n\r\nconst fragmentShader = `#version 300 es\r\nprecision highp float;\r\n    \r\nin vec2 uv;\r\nout vec4 fragColor;\r\n\r\nuniform sampler2D u_texture;\r\nuniform int u_frame;\r\n\r\nvoid main() {\r\n    if (u_frame == 0) {\r\n        fragColor = vec4(uv.x, 0.0, uv.y, 1);\r\n    } else {\r\n        fragColor = texture(u_texture, uv) + 0.001 * vec4(1.0, 1.0, 1.0, 0.0);\r\n    }\r\n}\r\n`;\r\n\r\nconst canvasShader = `#version 300 es\r\nprecision highp float;\r\n    \r\nin vec2 uv;\r\nout vec4 fragColor;\r\n\r\nuniform sampler2D u_texture;\r\n\r\nvoid main() {\r\n    fragColor = texture(u_texture, uv);\r\n}\r\n`;\r\n\r\nexport function createVertex(GL: WebGL2RenderingContext) {\r\n    const shader = GL.createShader(GL.VERTEX_SHADER)!;\r\n    GL.shaderSource(shader, vertexShader);\r\n    GL.compileShader(shader);\r\n\r\n    if (GL.getShaderParameter(shader, GL.COMPILE_STATUS)) {\r\n        return shader;\r\n    }\r\n\r\n    throw Error(`ERROR: ${GL.getShaderInfoLog(shader)}`);\r\n}\r\n\r\nexport function createFragment(GL: WebGL2RenderingContext) {\r\n    const shader = GL.createShader(GL.FRAGMENT_SHADER)!;\r\n    GL.shaderSource(shader, fragmentShader);\r\n    GL.compileShader(shader);\r\n\r\n    if (GL.getShaderParameter(shader, GL.COMPILE_STATUS)) {\r\n        return shader;\r\n    }\r\n    \r\n    throw Error(`ERROR: ${GL.getShaderInfoLog(shader)}`);\r\n}\r\n\r\nexport function createCanvas(GL: WebGL2RenderingContext) {\r\n    const shader = GL.createShader(GL.FRAGMENT_SHADER)!;\r\n    GL.shaderSource(shader, canvasShader);\r\n    GL.compileShader(shader);\r\n\r\n    if (GL.getShaderParameter(shader, GL.COMPILE_STATUS)) {\r\n        return shader;\r\n    }\r\n    \r\n    throw Error(`ERROR: ${GL.getShaderInfoLog(shader)}`);\r\n}", "export function createTextures(GL: WebGL2RenderingContext) {\r\n    const textures = [GL.createTexture()!, GL.createTexture()!] as const;\r\n    \r\n    for (let i = 0; i < 2; i++) {\r\n        GL.bindTexture(GL.TEXTURE_2D, textures[i]);\r\n        GL.texImage2D(GL.TEXTURE_2D, 0, GL.RGBA32F, GL.canvas.width, GL.canvas.height, 0, GL.RGBA, GL.FLOAT, null);\r\n        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.LINEAR);\r\n        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);\r\n        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);\r\n        GL.bindTexture(GL.TEXTURE_2D, null);\r\n    }\r\n\r\n    return textures;\r\n}", "import { createCanvas, createFragment, createVertex } from \"./shader.ts\";\r\nimport { createTextures } from \"./textures.ts\";\r\n\r\nconst CANVAS = document.querySelector(\"canvas\")!;\r\nconst GL = CANVAS.getContext(\"webgl2\")!;\r\n\r\nGL.getExtension( 'OES_texture_float_linear');\r\nGL.getExtension( 'EXT_color_buffer_float');\r\n\r\nGL.clearColor(0.0, 0.0, 0.0, 1.0);\r\nGL.clear(GL.COLOR_BUFFER_BIT);\r\n\r\nconst textureProgram = GL.createProgram()!;\r\nconst canvasProgram = GL.createProgram()!;\r\nconst vertexShader = createVertex(GL);\r\nconst fragmentShader = createFragment(GL);\r\nconst canvasShader = createCanvas(GL);\r\n\r\nGL.attachShader(textureProgram, vertexShader);\r\nGL.attachShader(textureProgram, fragmentShader);\r\n\r\nGL.attachShader(canvasProgram, vertexShader);\r\nGL.attachShader(canvasProgram, canvasShader);\r\n\r\nGL.linkProgram(textureProgram);\r\nGL.linkProgram(canvasProgram);\r\n\r\nconst textures = createTextures(GL);\r\nconst framebuffer = GL.createFramebuffer()!;\r\n\r\nconst vertexData = [-1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];\r\nconst vertBuffer = GL.createBuffer();\r\nGL.bindBuffer(GL.ARRAY_BUFFER, vertBuffer);\r\nGL.bufferData(GL.ARRAY_BUFFER, new Float32Array(vertexData), GL.STATIC_DRAW);\r\n    \r\nGL.enableVertexAttribArray(0);\r\n\r\nfor (let program of [textureProgram, canvasProgram]) {\r\n    const posAttrib = GL.getAttribLocation(program, \"a_position\");\r\n    GL.enableVertexAttribArray(posAttrib);\r\n    GL.vertexAttribPointer(posAttrib, 2, GL.FLOAT, false, 0, 0);\r\n}\r\n\r\nconst frameUniform = GL.getUniformLocation(textureProgram, \"u_frame\")!;\r\n\r\nlet frame = 0;\r\nfunction draw() {\r\n    drawTexture();\r\n\r\n    drawCanvas();\r\n\r\n    frame++;\r\n    requestAnimationFrame(draw);\r\n}\r\n\r\nfunction drawTexture() {\r\n    GL.bindFramebuffer(GL.FRAMEBUFFER, framebuffer);\r\n    GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, textures[frame%2], 0);\r\n\r\n    GL.bindTexture(GL.TEXTURE_2D, textures[(frame+1)%2]);\r\n\r\n    GL.useProgram(textureProgram);\r\n\r\n    GL.uniform1i(frameUniform, frame);\r\n\r\n    GL.viewport(0, 0, CANVAS.width, CANVAS.height);\r\n    GL.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    GL.clear(GL.COLOR_BUFFER_BIT);\r\n    GL.drawArrays(GL.TRIANGLES, 0, 6);\r\n}\r\n\r\nfunction drawCanvas() {\r\n    GL.useProgram(canvasProgram);\r\n    \r\n    GL.bindFramebuffer(GL.FRAMEBUFFER, null);\r\n\r\n    GL.viewport(0, 0, CANVAS.width, CANVAS.height);\r\n    GL.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    GL.clear(GL.COLOR_BUFFER_BIT);\r\n    GL.drawArrays(GL.TRIANGLES, 0, 6);\r\n}\r\n\r\nrequestAnimationFrame(draw);"],
  "mappings": "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",
  "names": ["GL", "GL", "textures", "vertexShader", "fragmentShader", "canvasShader"]
}
